import { useState, useRef, useCallback, useEffect } from 'react'
import { Stage, Layer, Rect, Group } from 'react-konva'
import { 
  TrashIcon, 
  DocumentArrowDownIcon,
  DocumentPlusIcon,
  Cog6ToothIcon,
  CubeIcon,
  RectangleStackIcon,
  CloudArrowUpIcon
} from '@heroicons/react/24/outline'
import toast from 'react-hot-toast'
import { Product, ShelfItem, PlanogramSettings, RackSystem, ShelfType } from '../types'
import PlanogramItem from '../components/PlanogramItem'
import EnhancedShelf from '../components/EnhancedShelf'
import RackSystem3D from '../components/RackSystem3D'
import { apiService } from '../services/api'

export default function PlanogramEditor() {
  const [items, setItems] = useState<ShelfItem[]>([])
  const [racks, setRacks] = useState<RackSystem[]>([])
  const [selectedId, setSelectedId] = useState<string | null>(null)

  const [products, setProducts] = useState<Product[]>([])
  const [productsLoading, setProductsLoading] = useState(true)
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [showPropertiesModal, setShowPropertiesModal] = useState(false)
  const [settings, setSettings] = useState<PlanogramSettings>({
    gridSizeMm: 50,
    pixelsPerMm: 0.5,
    showGrid: true,
    snapToGrid: true,
    canvasWidth: 1200,
    canvasHeight: 800,
    showDimensions: true,
    show3D: true,
    defaultShelfDepth: 400
  })
  const [images, setImages] = useState<{ [key: string]: HTMLImageElement }>({})
  const [currentPlanogramId, setCurrentPlanogramId] = useState<string | null>(null)
  const [currentPlanogramName, setCurrentPlanogramName] = useState<string>('')
  const stageRef = useRef<any>(null)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadProducts()
    loadPlanogramFromUrl()
  }, [])

  const loadPlanogramFromUrl = async () => {
    const urlParams = new URLSearchParams(window.location.search)
    const planogramId = urlParams.get('planogram')
    
    if (planogramId) {
      try {
        const planogram = await apiService.getPlanogram(planogramId)
        
        // –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø–æ–ª–µ data –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±—ä–µ–∫—Ç–µ
        const planogramData = planogram.data || planogram
        
        console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞:', {
          name: planogram.name,
          itemsCount: planogramData.items?.length || 0,
          racksCount: planogramData.racks?.length || 0,
          hasSettings: !!planogramData.settings
        })
        
        // üéØ –ë–õ–û–ö–ò–†–£–ï–ú –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã
        isScalingInProgress.current = true
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        setItems(planogramData.items || [])
        setRacks(planogramData.racks || [])
        if (planogramData.settings) {
          setSettings(prev => {
            const newSettings = { ...prev, ...planogramData.settings }
            // –û–±–Ω–æ–≤–ª—è–µ–º prevPixelsPerMm —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            prevPixelsPerMm.current = newSettings.pixelsPerMm
            return newSettings
          })
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º–µ
        setCurrentPlanogramId(planogram.id)
        setCurrentPlanogramName(planogram.name)
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          isScalingInProgress.current = false
        }, 100)
        
        toast.success(`–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ "${planogram.name}" –∑–∞–≥—Ä—É–∂–µ–Ω–∞`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã:', error)
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É')
        isScalingInProgress.current = false
      }
    }
  }

  const loadProducts = async () => {
    try {
      setProductsLoading(true)
      const productsData = await apiService.getProducts()
      setProducts(productsData)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤')
    } finally {
      setProductsLoading(false)
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
  const categories = ['all', ...new Set(products.map(p => p.category))]
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredProducts = selectedCategory === 'all' 
    ? products 
    : products.filter(p => p.category === selectedCategory)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const loadImage = useCallback((imageUrl: string): Promise<HTMLImageElement> => {
    return new Promise((resolve, reject) => {
      if (images[imageUrl]) {
        resolve(images[imageUrl])
        return
      }

      const img = new Image()
      img.crossOrigin = 'anonymous'
      img.onload = () => {
        setImages(prev => ({ ...prev, [imageUrl]: img }))
        resolve(img)
      }
      img.onerror = reject
      img.src = imageUrl
    })
  }, [images])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ items
  useEffect(() => {
    items.forEach(item => {
      if (item.product?.imageUrl) {
        loadImage(item.product.imageUrl)
      }
    })
  }, [items, loadImage])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–º –≤ –ø–∏–∫—Å–µ–ª–∏
  const mmToPixels = useCallback((mm: number) => mm * settings.pixelsPerMm, [settings.pixelsPerMm])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Ç–∫–µ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
  const snapToGrid = useCallback((value: number) => {
    if (!settings.snapToGrid) return value
    const gridSizePixels = mmToPixels(settings.gridSizeMm)
    return Math.round(value / gridSizePixels) * gridSizePixels
  }, [settings.gridSizeMm, settings.snapToGrid, mmToPixels])

  const addShelf = useCallback((shelfType: ShelfType = 'standard') => {
    const newShelf: ShelfItem = {
      id: `shelf-${Date.now()}`,
      x: snapToGrid(50),
      y: snapToGrid(50),
      width: mmToPixels(800),
      height: mmToPixels(120),
      depth: settings.defaultShelfDepth,
      type: 'shelf',
      shelfType,
      resizable: true,
      maxLoad: shelfType === 'hook' ? 5 : shelfType === 'basket' ? 10 : 20
    }
    setItems(prev => [...prev, newShelf])
    toast.success(`–ü–æ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞`)
  }, [snapToGrid, mmToPixels, settings.defaultShelfDepth])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const createRackShelves = useCallback((rack: RackSystem) => {
    const rackWidthPx = mmToPixels(rack.width)
    const rackHeightPx = mmToPixels(rack.height)
    
    // –ï–î–ò–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –¥–µ–ª–∏–º —Å—Ç–µ–ª–ª–∞–∂ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫
    // –ö–∞–∂–¥–∞—è –ø–æ–ª–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1/levels —á–∞—Å—Ç—å –æ—Ç –æ–±—â–µ–π –≤—ã—Å–æ—Ç—ã —Å—Ç–µ–ª–ª–∞–∂–∞
    const shelfHeightPx = rackHeightPx / rack.levels
    
    const shelves: ShelfItem[] = []
    
    for (let level = 0; level < rack.levels; level++) {
      // –ü–æ–ª–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
      // –ù–∏–∂–Ω—è—è –ø–æ–ª–∫–∞ (level=0) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è —Å—Ç–µ–ª–ª–∞–∂–∞
      // –ö–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ª–∫–∞ –≤—ã—à–µ –Ω–∞ shelfHeightPx
      const shelfY = rack.y + rackHeightPx - (level + 1) * shelfHeightPx
      
      const shelf: ShelfItem = {
        id: `${rack.id}-shelf-${level}`,
        x: rack.x,
        y: shelfY,
        width: rackWidthPx,
        height: shelfHeightPx,
        depth: rack.depth,
        type: 'shelf',
        shelfType: 'standard',
        resizable: true,
        maxLoad: 20,
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        rackId: rack.id,
        level,
        isTopShelf: level === rack.levels - 1,
        isBottomShelf: level === 0
      }
      
      shelves.push(shelf)
      
      console.log(`üìê –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª–∫–∞ ${level} –¥–ª—è —Å—Ç–µ–ª–ª–∞–∂–∞ ${rack.id}:`, {
        id: shelf.id,
        level,
        x: shelf.x,
        y: shelf.y,
        width: shelf.width,
        height: shelf.height,
        heightMm: Math.round(shelf.height / settings.pixelsPerMm),
        isTopShelf: shelf.isTopShelf,
        rackHeight: rackHeightPx,
        rackHeightMm: rack.height
      })
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${shelves.length} –ø–æ–ª–æ–∫ –¥–ª—è —Å—Ç–µ–ª–ª–∞–∂–∞ ${rack.id} —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π ${Math.round(shelfHeightPx / settings.pixelsPerMm)}–º–º`)
    
    return shelves
  }, [mmToPixels, settings.pixelsPerMm])

  const addRack = useCallback((rackType: 'gondola' | 'wall' | 'endcap' | 'island') => {
    const rackId = `rack-${Date.now()}`
    
    // üéØ –°–û–ó–î–ê–ï–ú –Ω–æ–≤—ã–µ —Å—Ç–µ–ª–ª–∞–∂–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª–∏—Å—å
    const existingRacksCount = racks.length
    const offsetX = (existingRacksCount % 3) * 300 // 3 —Å—Ç–µ–ª–ª–∞–∂–∞ –≤ —Ä—è–¥
    const offsetY = Math.floor(existingRacksCount / 3) * 400 // –Ω–æ–≤—ã–π —Ä—è–¥ –∫–∞–∂–¥—ã–µ 3 —Å—Ç–µ–ª–ª–∞–∂–∞
    
    const rackX = snapToGrid(100 + offsetX)
    const rackY = snapToGrid(100 + offsetY)
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–µ–ª–ª–∞–∂
    const newRack: RackSystem = {
      id: rackId,
      name: `–°—Ç–µ–ª–ª–∞–∂`,
      type: rackType,
      x: rackX,
      y: rackY,
      width: 1200,
      height: 1800,
      depth: 400,
      levels: 4,
      shelves: []
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–∫–∏ –¥–ª—è —Å—Ç–µ–ª–ª–∞–∂–∞
    const shelves = createRackShelves(newRack)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–ª–ª–∞–∂ —Å –ø–æ–ª–∫–∞–º–∏
    newRack.shelves = shelves
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–ª–ª–∞–∂ (–ø–æ–ª–∫–∏ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ items - –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ rack.shelves)
    setRacks(prev => [...prev, newRack])
    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π –≤ items
    
    toast.success(`–°—Ç–µ–ª–ª–∞–∂ –¥–æ–±–∞–≤–ª–µ–Ω —Å ${newRack.levels} –ø–æ–ª–∫–∞–º–∏`)
  }, [snapToGrid, createRackShelves, racks.length])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∫ –≤ —Å—Ç–µ–ª–ª–∞–∂–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Ä–æ–≤–Ω–µ–π
  const updateRackShelves = useCallback((rackId: string, newLevels: number) => {
    setRacks(prev => prev.map(rack => {
      if (rack.id !== rackId) return rack
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª–∫–∏ –∏–∑ items
      setItems(prevItems => prevItems.filter(item => !rack.shelves.some(shelf => shelf.id === item.id)))
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–µ–ª–ª–∞–∂ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Ä–æ–≤–Ω–µ–π
      const updatedRack = { ...rack, levels: newLevels }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
      const newShelves: ShelfItem[] = []
      
      // –†–∞–∑–º–µ—Ä—ã —Å—Ç–µ–ª–ª–∞–∂–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
      const rackWidthPx = updatedRack.width * settings.pixelsPerMm
      const rackHeightPx = updatedRack.height * settings.pixelsPerMm
      
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –¥–µ–ª–∏–º —Å—Ç–µ–ª–ª–∞–∂ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∫
      // –ö–∞–∂–¥–∞—è –ø–æ–ª–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1/levels —á–∞—Å—Ç—å –æ—Ç –æ–±—â–µ–π –≤—ã—Å–æ—Ç—ã —Å—Ç–µ–ª–ª–∞–∂–∞
      const shelfHeightPx = rackHeightPx / newLevels
      
      for (let i = 0; i < newLevels; i++) {
        // –ü–æ–ª–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        // –ù–∏–∂–Ω—è—è –ø–æ–ª–∫–∞ (i=0) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è —Å—Ç–µ–ª–ª–∞–∂–∞
        // –ö–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ª–∫–∞ –≤—ã—à–µ –Ω–∞ shelfHeightPx
        const shelfY = updatedRack.y + rackHeightPx - (i + 1) * shelfHeightPx
        
        const shelf: ShelfItem = {
          id: `shelf-${updatedRack.id}-${i}`,
          type: 'shelf' as const,
          x: updatedRack.x,
          y: shelfY,
          width: rackWidthPx,
          height: shelfHeightPx,
          depth: updatedRack.depth,
          level: i,
          rackId: updatedRack.id
        }
        
        newShelves.push(shelf)
      }
      
      // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π –≤ items - –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ rack.shelves
      console.log(`üìã –°–æ–∑–¥–∞–ª–∏ –ø–æ–ª–∫–∏ –¥–ª—è —Å—Ç–µ–ª–ª–∞–∂–∞ ${updatedRack.id}:`, newShelves.map(s => ({ 
        id: s.id, 
        level: s.level,
        x: s.x, 
        y: s.y,
        width: s.width,
        height: s.height,
        heightMm: Math.round(s.height / settings.pixelsPerMm),
        rackY: updatedRack.y,
        rackHeight: rackHeightPx,
        rackBottom: updatedRack.y + rackHeightPx
      })))
      
      return {
        ...updatedRack,
        shelves: newShelves
      }
    }))
  }, [settings.pixelsPerMm])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–µ–ª–ª–∞–∂–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–æ–ª–æ–∫
  const updateRackDimensions = useCallback((rackId: string, newDimensions: Partial<Pick<RackSystem, 'width' | 'height' | 'depth'>>) => {
    setRacks(prev => prev.map(rack => {
      if (rack.id !== rackId) return rack
      
      const updatedRack = { ...rack, ...newDimensions }
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Ä–∞–∑–º–µ—Ä—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ø–æ–ª–∫–∏
      if (newDimensions.width || newDimensions.height) {
        // –°–û–•–†–ê–ù–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∫–∏ –∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Ä–∞–∑–º–µ—Ä—ã
        const updatedShelves = rack.shelves.map(existingShelf => {
          // –†–∞–∑–º–µ—Ä—ã —Å—Ç–µ–ª–ª–∞–∂–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
          const rackWidthPx = updatedRack.width * settings.pixelsPerMm
          const rackHeightPx = updatedRack.height * settings.pixelsPerMm
          
          // –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π –ø–æ–ª–∫–∏
          const shelfHeightPx = rackHeightPx / rack.levels
          
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë —É—Ä–æ–≤–Ω—è
          const shelfY = updatedRack.y + rackHeightPx - (existingShelf.level! + 1) * shelfHeightPx
          
          return {
            ...existingShelf,
            x: updatedRack.x, // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é X —Å—Ç–µ–ª–ª–∞–∂–∞
            y: shelfY, // –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º Y –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
            width: rackWidthPx, // –æ–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É
            height: shelfHeightPx, // –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É
            depth: updatedRack.depth
          }
        })
        
        console.log(`üìê –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è ${updatedShelves.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–æ–∫ —Å—Ç–µ–ª–ª–∞–∂–∞ ${rack.id}`)
        
        return {
          ...updatedRack,
          shelves: updatedShelves
        }
      }
      
      return updatedRack
    }))
  }, [settings.pixelsPerMm])

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–æ–ª–æ–∫ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
  const prevPixelsPerMm = useRef(settings.pixelsPerMm)
  const isScalingInProgress = useRef(false)
  const racksRef = useRef(racks)
  const itemsRef = useRef(items)
  
  // –û–±–Ω–æ–≤–ª—è–µ–º refs –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    racksRef.current = racks
  }, [racks])
  
  useEffect(() => {
    itemsRef.current = items
  }, [items])
  
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
    if (prevPixelsPerMm.current === settings.pixelsPerMm || isScalingInProgress.current) {
      return
    }
    
    const oldScale = prevPixelsPerMm.current
    const newScale = settings.pixelsPerMm
    const currentRacks = racksRef.current
    const currentItems = itemsRef.current
    
    isScalingInProgress.current = true
    
    console.log('üîÑ –ò–∑–º–µ–Ω–∏–ª—Å—è –º–∞—Å—à—Ç–∞–±, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã...', { 
      oldScale, 
      newScale,
      racksCount: currentRacks.length,
      itemsCount: currentItems.length 
    })
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ —Ç–∞–π–º–µ—Ä–æ–≤
    const scaleRatio = newScale / oldScale
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–ª–ª–∞–∂–∏ –∏ –∏—Ö –ø–æ–ª–∫–∏
    const newRacks = currentRacks.map(rack => {
      // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç–µ–ª–ª–∞–∂–∞
      const newRackX = rack.x * scaleRatio
      const newRackY = rack.y * scaleRatio
      
      // –†–∞–∑–º–µ—Ä—ã —Å—Ç–µ–ª–ª–∞–∂–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö —Å –Ω–æ–≤—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
      const rackWidthPx = rack.width * newScale
      const rackHeightPx = rack.height * newScale
      
      // –û–ë–ù–û–í–õ–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ø–æ–ª–∫–∏ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
      const shelfHeightPx = rackHeightPx / rack.levels
      
      const updatedShelves = rack.shelves.map((existingShelf) => {
        const shelfLevel = existingShelf.level ?? 0
        const shelfY = newRackY + rackHeightPx - (shelfLevel + 1) * shelfHeightPx
        
        // üéØ –°–û–•–†–ê–ù–Ø–ï–ú shelfType –∏ –¥—Ä—É–≥–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
        return {
          ...existingShelf, // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–∫–ª—é—á–∞—è shelfType
          x: newRackX,
          y: shelfY,
          width: rackWidthPx,
          height: shelfHeightPx,
          depth: rack.depth
        }
      })
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–∏–ª–∏ –ø–æ–ª–∫–∏ –¥–ª—è —Å—Ç–µ–ª–ª–∞–∂–∞ ${rack.id}: ${updatedShelves.length} –ø–æ–ª–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤`, 
        updatedShelves.map(s => ({
          id: s.id,
          level: s.level,
          shelfType: s.shelfType, // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∏–ø—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
          x: s.x,
          y: s.y,
          width: s.width,
          height: s.height
        }))
      )
      
      return {
        ...rack,
        x: newRackX,
        y: newRackY,
        shelves: updatedShelves
      }
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º items: –ù–ï –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π –≤ items (–æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ rack.shelves)
    const newItems = currentItems
      .filter(item => {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–∫–∏ (–ù–ï –ø–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π)
        const shouldKeep = !(item.type === 'shelf' && item.rackId)
        if (!shouldKeep && item.type === 'shelf') {
          console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª–∫—É —Å—Ç–µ–ª–ª–∞–∂–∞ –∏–∑ items:', item.id)
        }
        return shouldKeep
      })
      .map(item => {
        if (item.type === 'product' && item.product) {
          // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
          const newWidth = item.product.width * newScale
          const newHeight = item.product.height * newScale
          
          // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞
          const newX = item.x * scaleRatio
          const newY = item.y * scaleRatio
          
          console.log('üì¶ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä:', {
            id: item.id,
            name: item.product.name,
            oldPosition: { x: item.x, y: item.y },
            newPosition: { x: newX, y: newY },
            oldSize: { width: item.width, height: item.height },
            newSize: { width: newWidth, height: newHeight },
            scaleRatio
          })
          
          return {
            ...item,
            x: newX,
            y: newY,
            width: newWidth,
            height: newHeight
          }
        }
        
        if (item.type === 'shelf' && !item.rackId) {
          // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–∫–∏
          const widthMm = item.width / oldScale
          const heightMm = item.height / oldScale
          const newX = item.x * scaleRatio
          const newY = item.y * scaleRatio
          
          console.log('üìã –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–æ–ª–∫—É:', {
            id: item.id,
            oldPosition: { x: item.x, y: item.y },
            newPosition: { x: newX, y: newY },
            oldSize: { width: item.width, height: item.height },
            newSize: { width: widthMm * newScale, height: heightMm * newScale }
          })
          
          return {
            ...item,
            x: newX,
            y: newY,
            width: widthMm * newScale,
            height: heightMm * newScale
          }
        }
        
        return item
      })
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ items:', {
      originalCount: currentItems.length,
      filteredCount: newItems.length,
      products: newItems.filter(i => i.type === 'product').length,
      independentShelves: newItems.filter(i => i.type === 'shelf' && !i.rackId).length
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setRacks(newRacks)
    setItems(newItems)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    prevPixelsPerMm.current = newScale
    isScalingInProgress.current = false
    console.log('‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    
  }, [settings.pixelsPerMm]) // –¢–û–õ–¨–ö–û pixelsPerMm!

  const addProduct = useCallback((product: Product) => {
    console.log(`üéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê "${product.name}":`, {
      selectedId,
      hasSelectedId: !!selectedId,
      availableRacks: racks.length,
      availableItems: items.length
    })

    if (!selectedId) {
      toast.error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∫—É')
      return
    }

    // –ò—â–µ–º –ø–æ–ª–∫—É —Å–Ω–∞—á–∞–ª–∞ –≤ items (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–∫–∏), –∑–∞—Ç–µ–º –≤ racks (–ø–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π)
    let shelf = items.find(item => item.id === selectedId && item.type === 'shelf')
    
    console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª–∫–∏ –≤ items:`, {
      selectedId,
      foundInItems: !!shelf,
      allItemsIds: items.map(item => ({ id: item.id, type: item.type }))
    })
    
    if (!shelf) {
      // –ò—â–µ–º –≤ –ø–æ–ª–∫–∞—Ö —Å—Ç–µ–ª–ª–∞–∂–µ–π
      for (const rack of racks) {
        const rackShelf = rack.shelves.find(s => s.id === selectedId)
        if (rackShelf) {
          shelf = rackShelf
          console.log(`‚úÖ –ü–æ–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–µ–ª–ª–∞–∂–µ ${rack.id}:`, {
            shelfId: rackShelf.id,
            shelfLevel: rack.shelves.indexOf(rackShelf),
            rackId: rack.id
          })
          break
        }
      }
    }
    
    if (!shelf) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª–∫–∏ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–∫–∏ –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –≤ –º–º)
    const shelfHeightMm = Math.round(shelf.height / settings.pixelsPerMm)
    const shelfDepthMm = shelf.depth || 400

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –≤–µ—Ä—Ö–Ω—è—è –ø–æ–ª–∫–∞ —Å—Ç–µ–ª–ª–∞–∂–∞ (—É –Ω–µ—ë –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞)
    const isTopShelfOfRack = racks.some(rack => 
      rack.shelves.length > 0 && 
      rack.shelves[rack.shelves.length - 1].id === shelf.id // –≤–µ—Ä—Ö–Ω—è—è –ø–æ–ª–∫–∞ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π level (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤ –º–∞—Å—Å–∏–≤–µ)
    )
    
    console.log(`üè∑Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª–∫–∏:`, {
      shelfId: shelf.id,
      isTopShelfOfRack,
      racksWithShelves: racks.map(rack => ({
        rackId: rack.id,
        shelvesCount: rack.shelves.length,
        topShelfId: rack.shelves[rack.shelves.length - 1]?.id,
        allShelvesIds: rack.shelves.map(s => s.id)
      }))
    })
    
    if (!isTopShelfOfRack && product.height > shelfHeightMm) {
      toast.error(`–¢–æ–≤–∞—Ä —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –¥–ª—è –ø–æ–ª–∫–∏ (${product.height}–º–º > ${shelfHeightMm}–º–º)`)
      return
    }

    if (product.depth > shelfDepthMm) {
      toast.error(`–¢–æ–≤–∞—Ä —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–∏–π –¥–ª—è –ø–æ–ª–∫–∏ (${product.depth}–º–º > ${shelfDepthMm}–º–º)`)
      return
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    const productWidthPx = mmToPixels(product.width)
    const productHeightPx = mmToPixels(product.height)
    
    // –í—ã—á–∏—Å–ª—è–µ–º Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç–æ–≤–∞—Ä–∞
    const shelfBottomY = shelf.y + shelf.height
    let productY: number
    
    if (isTopShelfOfRack) {
      // –î–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–∫–∏: —Ç–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç –ù–ê –ø–æ–ª–∫–µ
      // –¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –∫–∞—Å–∞—Ç—å—Å—è –ù–ò–ñ–ù–ï–ô —á–∞—Å—Ç–∏ –ø–æ–ª–∫–∏ (–Ω–∏–∑–∞ –ø–æ–ª–∫–∏)
      // –ù–∏–∑ —Ç–æ–≤–∞—Ä–∞ = –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–∫–∏ = shelf.y + shelf.height
      // –ü–æ—ç—Ç–æ–º—É Y —Ç–æ–≤–∞—Ä–∞ = (shelf.y + shelf.height) - productHeightPx
      productY = shelfBottomY - productHeightPx
      console.log(`üìê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç Y –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–∫–∏:`, {
        shelfY: shelf.y,
        shelfHeight: shelf.height,
        shelfBottom: shelfBottomY,
        productHeightPx,
        calculatedY: productY,
        productBottom: productY + productHeightPx,
        shouldEqualShelfBottom: shelfBottomY,
        explanation: '–¢–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç –ù–ê –ù–ò–ñ–ù–ï–ô –ì–†–ê–ù–ò–¶–ï –ø–æ–ª–∫–∏ (–∫–∞–∫ –Ω–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª–∫–∞—Ö)'
      })
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–æ–∫: —Ç–æ–≤–∞—Ä —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –í–ù–£–¢–†–ò –ø–æ–ª–∫–∏
      productY = shelfBottomY - productHeightPx
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ø–æ –≤—ã—Å–æ—Ç–µ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∫–∏
      if (productHeightPx > shelf.height) {
        const shelfHeightMm = Math.round(shelf.height / settings.pixelsPerMm)
        toast.error(`–¢–æ–≤–∞—Ä –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ø–æ –≤—ã—Å–æ—Ç–µ (${product.height}–º–º > ${shelfHeightMm}–º–º)`)
        return
      }
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –ø–æ–ª–∫–µ
    console.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª–∫–∏ ${shelf.id}:`, {
      shelfX: shelf.x,
      shelfWidth: shelf.width,
      shelfY: shelf.y,
      shelfHeight: shelf.height,
      totalItems: items.length,
      products: items.filter(i => i.type === 'product').map(i => ({
        name: i.product?.name,
        x: i.x,
        y: i.y,
        width: i.width,
        height: i.height
      }))
    })

    const productsOnShelf = items.filter(item => {
      if (item.type !== 'product') return false
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∫–∏ (—Å —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é)
      const withinHorizontalBounds = item.x >= shelf.x - 10 && item.x < shelf.x + shelf.width + 10
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ "${item.product?.name}" –¥–ª—è –ø–æ–ª–∫–∏ ${shelf.id}:`, {
        itemX: item.x,
        itemY: item.y,
        shelfX: shelf.x,
        shelfY: shelf.y,
        shelfWidth: shelf.width,
        shelfHeight: shelf.height,
        withinHorizontalBounds,
        horizontalCheck: `${item.x} >= ${shelf.x - 10} && ${item.x} < ${shelf.x + shelf.width + 10}`
      })
      
      if (!withinHorizontalBounds) return false
      
      // –î–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–∞ —Ç–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤—ã—à–µ –ø–æ–ª–∫–∏
      if (isTopShelfOfRack) {
        // –î–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–∫–∏: —Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –∫–∞—Å–∞—Ç—å—Å—è –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∫–∏ (–º–æ–∂–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤—ã—à–µ)
        // –ù–∏–∑ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–∏–∑–∞ –ø–æ–ª–∫–∏ (—Å —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é)
        const shelfBottom = shelf.y + shelf.height
        const itemBottom = item.y + item.height
        const standsOnShelfBottom = Math.abs(itemBottom - shelfBottom) <= 10
        
        console.log(`üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–∫–µ "${item.product?.name}":`, {
          shelfId: shelf.id,
          itemY: item.y,
          itemHeight: item.height,
          itemBottom: item.y + item.height,
          shelfY: shelf.y,
          shelfHeight: shelf.height,
          shelfBottom: shelf.y + shelf.height,
          standsOnShelfBottom,
          tolerance: Math.abs(itemBottom - shelfBottom),
          isTopShelf: true,
          explanation: '–¢–æ–≤–∞—Ä –∫–∞—Å–∞–µ—Ç—Å—è –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∫–∏ (–º–æ–∂–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤—ã—à–µ)'
        })
        return standsOnShelfBottom
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–æ–∫: —Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–ù–£–¢–†–ò –ø–æ–ª–∫–∏
        const withinVerticalBounds = item.y >= shelf.y && item.y + item.height <= shelf.y + shelf.height + 10
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ–±—ã—á–Ω–æ–π –ø–æ–ª–∫–µ "${item.product?.name}":`, {
          shelfId: shelf.id,
          itemY: item.y,
          itemHeight: item.height,
          shelfY: shelf.y,
          shelfHeight: shelf.height,
          withinVerticalBounds,
          isTopShelf: false
        })
        return withinVerticalBounds
      }
    })

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–Ω—è—Ç—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –Ω–∞ –ø–æ–ª–∫–µ
    const occupiedSpaces = productsOnShelf
      .map(item => ({
        start: item.x,
        end: item.x + item.width,
        product: item.product?.name || '–¢–æ–≤–∞—Ä'
      }))
      .sort((a, b) => a.start - b.start)

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ–ª–∫–µ ${shelf.id}:`, {
      totalProducts: productsOnShelf.length,
      products: productsOnShelf.map(p => ({
        name: p.product?.name,
        x: p.x,
        width: p.width,
        y: p.y,
        height: p.height
      })),
      occupiedSpaces,
      isTopShelf: isTopShelfOfRack
    })

    // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    const spacingPx = mmToPixels(product.spacing || 50) // –∏—Å–ø–æ–ª—å–∑—É–µ–º spacing –∏–∑ —Ç–æ–≤–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50–º–º)
    let nextX = shelf.x // –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –ø–æ–ª–∫–∏

    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "${product.name}":`, {
      shelfX: shelf.x,
      shelfWidth: shelf.width,
      productWidth: productWidthPx,
      spacing: spacingPx,
      totalProductsOnShelf: productsOnShelf.length,
      occupiedSpaces: occupiedSpaces.length
    })

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–Ω—è—Ç—ã–º —É—á–∞—Å—Ç–∫–∞–º –∏ –∏—â–µ–º –º–µ—Å—Ç–æ
    for (const space of occupiedSpaces) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ: nextX=${nextX}, productWidth=${productWidthPx}, spacing=${spacingPx}, spaceStart=${space.start}`)
      if (nextX + productWidthPx <= space.start) {
        // –¢–æ–≤–∞—Ä –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —É—á–∞—Å—Ç–∫–æ–º (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ spacing)
        console.log(`‚úÖ –¢–æ–≤–∞—Ä –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ "${space.product}" –≤ –ø–æ–∑–∏—Ü–∏—é X=${nextX}`)
        break
      }
      // –°–¥–≤–∏–≥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞ —Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–æ–∫
      const oldNextX = nextX
      nextX = space.end + spacingPx
      console.log(`‚û°Ô∏è –°–¥–≤–∏–≥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: ${oldNextX} ‚Üí ${nextX} (–∑–∞ —Ç–æ–≤–∞—Ä–æ–º "${space.product}")`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ –Ω–∞ –ø–æ–ª–∫–µ
    const shelfRightEdge = shelf.x + shelf.width
    if (nextX + productWidthPx > shelfRightEdge) {
      const availableWidthMm = Math.round((shelfRightEdge - nextX) / settings.pixelsPerMm)
      toast.error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –ø–æ–ª–∫–µ (–Ω—É–∂–Ω–æ ${product.width}–º–º, –¥–æ—Å—Ç—É–ø–Ω–æ ${availableWidthMm}–º–º)`)
      return
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–º—É —Å—Ç–µ–ª–ª–∞–∂—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª–∫–∞
    let rackId: string | undefined = undefined
    for (const rack of racks) {
      if (rack.shelves.some(s => s.id === shelf.id)) {
        rackId = rack.id
        break
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    const newProduct: ShelfItem = {
      id: `product-${Date.now()}`,
      x: snapToGrid(nextX),
      y: snapToGrid(productY),
      width: productWidthPx,
      height: productHeightPx,
      depth: product.depth,
      product,
      type: 'product',
      rackId: rackId,
      shelfId: shelf.id
    }

    console.log(`üéØ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä "${product.name}":`, {
      finalX: snapToGrid(nextX),
      finalY: snapToGrid(productY),
      width: productWidthPx,
      height: productHeightPx,
      shelfId: shelf.id,
      shelfY: shelf.y,
      shelfHeight: shelf.height,
      shelfBottom: shelf.y + shelf.height,
      isTopShelf: isTopShelfOfRack
    })

    setItems(prev => [...prev, newProduct])
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
    const remainingWidthMm = Math.round((shelfRightEdge - nextX - productWidthPx) / settings.pixelsPerMm)
    toast.success(`–¢–æ–≤–∞—Ä "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω. –°–≤–æ–±–æ–¥–Ω–æ: ${remainingWidthMm}–º–º`)
  }, [selectedId, items, racks, snapToGrid, mmToPixels, settings.pixelsPerMm])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–∫–∏
  const repositionProductsOnShelf = useCallback((shelfId: string) => {
    setItems(prev => {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–∫—É —Å–Ω–∞—á–∞–ª–∞ –≤ items (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–∫–∏), –∑–∞—Ç–µ–º –≤ racks (–ø–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π)
      let shelf = prev.find(item => item.id === shelfId)
      
      if (!shelf) {
        // –ò—â–µ–º –≤ –ø–æ–ª–∫–∞—Ö —Å—Ç–µ–ª–ª–∞–∂–µ–π
        for (const rack of racks) {
          const rackShelf = rack.shelves.find(s => s.id === shelfId)
          if (rackShelf) {
            shelf = rackShelf
            break
          }
        }
      }
      
      if (!shelf) return prev

      return prev.map(item => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ–≤–∞—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–æ–ª–∫–µ
        if (item.type === 'product' && 
            item.x >= shelf.x - 10 && // –Ω–µ–±–æ–ª—å—à–∞—è —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å–ª–µ–≤–∞
            item.x < shelf.x + shelf.width + 10 && // –∏ —Å–ø—Ä–∞–≤–∞
            item.y >= shelf.y - 50 && // —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –ø–æ–ª–∫–æ–π (—Å —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é)
            item.y <= shelf.y + shelf.height + 50) { // –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª–∫–∏
          
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä –í–ù–£–¢–†–ò –ø–æ–ª–∫–∏ (–ø—Ä–∏–∂–∏–º–∞–µ–º –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ)
          const shelfBottomY = shelf.y + shelf.height
          const newY = shelfBottomY - item.height // —Ç–æ–≤–∞—Ä —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –í–ù–£–¢–†–ò –ø–æ–ª–∫–∏
          return {
            ...item,
            y: snapToGrid(newY)
          }
        }
        return item
      })
    })
  }, [snapToGrid, racks])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ–ª–∫–µ
  const distributeProductsEvenly = useCallback((shelfId: string) => {
    setItems(prev => {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–∫—É —Å–Ω–∞—á–∞–ª–∞ –≤ items (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–∫–∏), –∑–∞—Ç–µ–º –≤ racks (–ø–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π)
      let shelf = prev.find(item => item.id === shelfId)
      
      if (!shelf) {
        // –ò—â–µ–º –≤ –ø–æ–ª–∫–∞—Ö —Å—Ç–µ–ª–ª–∞–∂–µ–π
        for (const rack of racks) {
          const rackShelf = rack.shelves.find(s => s.id === shelfId)
          if (rackShelf) {
            shelf = rackShelf
            break
          }
        }
      }
      
      if (!shelf) {
        console.warn('–ü–æ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', shelfId)
        return prev
      }

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –ø–æ–ª–∫–µ
      const productsOnShelf = prev.filter(item => 
        item.type === 'product' && 
        item.x >= shelf.x - 10 && 
        item.x < shelf.x + shelf.width + 10 && 
        item.y >= shelf.y - 50 && 
        item.y <= shelf.y + shelf.height + 50
      )

      if (productsOnShelf.length === 0) {
        toast.success('–ù–∞ –ø–æ–ª–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è')
        return prev
      }

      if (productsOnShelf.length === 1) {
        toast.success('–ù–∞ –ø–æ–ª–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä')
        return prev
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
      const sortedProducts = [...productsOnShelf].sort((a, b) => a.x - b.x)
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —à–∏—Ä–∏–Ω—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
      const totalProductsWidth = sortedProducts.reduce((sum, product) => sum + product.width, 0)
      
      // –î–æ—Å—Ç—É–ø–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞–µ–≤)
      const edgeMargin = 10 // –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ –ø–æ–ª–∫–∏
      const availableWidth = shelf.width - (edgeMargin * 2)
      
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –Ω–∞ –ø–æ–ª–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (totalProductsWidth > availableWidth) {
        toast.error('–¢–æ–≤–∞—Ä—ã —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–µ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–∫–µ')
        return prev
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
      const totalSpacing = availableWidth - totalProductsWidth
      const spacingBetweenProducts = totalSpacing / (sortedProducts.length - 1) // –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –ú–ï–ñ–î–£ —Ç–æ–≤–∞—Ä–∞–º–∏
      
      console.log(`üìê –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${sortedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤:`, {
        shelfWidth: shelf.width,
        availableWidth,
        totalProductsWidth,
        totalSpacing,
        spacingBetweenProducts: Math.round(spacingBetweenProducts),
        edgeMargin
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ë–ï–ó –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Ç–∫–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      return prev.map(item => {
        const productIndex = sortedProducts.findIndex(p => p.id === item.id)
        if (productIndex !== -1) {
          // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é X –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
          let newX = shelf.x + edgeMargin // –Ω–∞—á–∏–Ω–∞–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
          
          // –î–æ–±–∞–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
          for (let i = 0; i < productIndex; i++) {
            newX += sortedProducts[i].width + spacingBetweenProducts
          }
          
          // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–∫–∏
          const shelfBottomY = shelf.y + shelf.height
          const newY = shelfBottomY - item.height
          
          return {
            ...item,
            x: newX, // –ë–ï–ó snapToGrid –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            y: newY  // –ë–ï–ó snapToGrid –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          }
        }
        return item
      })
    })
    
    toast.success('–¢–æ–≤–∞—Ä—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –ø–æ–ª–∫–µ')
  }, [racks]) // —É–±—Ä–∞–ª snapToGrid –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const deleteItem = useCallback((id: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–µ–ª–ª–∞–∂
    const rackToDelete = racks.find(rack => rack.id === id)
    
    if (rackToDelete) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–µ–ª–ª–∞–∂ –∏ –≤—Å–µ –µ–≥–æ –ø–æ–ª–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã
      const shelfIds = rackToDelete.shelves.map(shelf => shelf.id)
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –ø–æ–ª–∫–∞—Ö —ç—Ç–æ–≥–æ —Å—Ç–µ–ª–ª–∞–∂–∞
      const productsToDelete = items.filter(item => 
        item.type === 'product' && 
        shelfIds.some(shelfId => {
          // –ò—â–µ–º –ø–æ–ª–∫—É –≤ —Å—Ç–µ–ª–ª–∞–∂–∞—Ö, –∞ –Ω–µ –≤ items
          const shelf = rackToDelete.shelves.find(s => s.id === shelfId)
          if (!shelf) return false
          return item.x >= shelf.x - 10 && 
                 item.x < shelf.x + shelf.width + 10 && 
                 item.y >= shelf.y && // —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–ù–£–¢–†–ò –ø–æ–ª–∫–∏
                 item.y + item.height <= shelf.y + shelf.height + 10 // –∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ø–æ –≤—ã—Å–æ—Ç–µ
        })
      )
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–µ–ª–ª–∞–∂, –µ–≥–æ –ø–æ–ª–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã
      setRacks(prev => prev.filter(rack => rack.id !== id))
      setItems(prev => prev.filter(item => 
        !shelfIds.includes(item.id) && 
        !productsToDelete.some(product => product.id === item.id)
      ))
      
      toast.success(`–°—Ç–µ–ª–ª–∞–∂ —É–¥–∞–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å ${rackToDelete.shelves.length} –ø–æ–ª–∫–∞–º–∏ –∏ ${productsToDelete.length} —Ç–æ–≤–∞—Ä–∞–º–∏`)
      setSelectedId(null)
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–∫–∞ —Å—Ç–µ–ª–ª–∞–∂–∞
    let shelfToDelete = null
    let parentRack = null
    
    for (const rack of racks) {
      const shelfFound = rack.shelves.find(shelf => shelf.id === id)
      if (shelfFound) {
        shelfToDelete = shelfFound
        parentRack = rack
        break
      }
    }
    
    if (shelfToDelete && parentRack) {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª–∫—É –∏–∑ —Å—Ç–µ–ª–ª–∞–∂–∞ –ë–ï–ó –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–æ–∫
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª–∫—É —Å—Ç–µ–ª–ª–∞–∂–∞: ${shelfToDelete.id} –∏–∑ —Å—Ç–µ–ª–ª–∞–∂–∞ ${parentRack.id}`)
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –ø–æ–ª–∫–µ
      const productsToDelete = items.filter(item => 
        item.type === 'product' && 
        item.x >= shelfToDelete.x - 10 && 
        item.x < shelfToDelete.x + shelfToDelete.width + 10 && 
        item.y >= shelfToDelete.y && 
        item.y + item.height <= shelfToDelete.y + shelfToDelete.height + 10
      )
      
      // –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ø–æ–ª–∫—É –∏–∑ —Å—Ç–µ–ª–ª–∞–∂–∞, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      setRacks(prev => prev.map(rack => {
        if (rack.id !== parentRack.id) return rack
        
        const remainingShelves = rack.shelves.filter(shelf => shelf.id !== id)
        
        return {
          ...rack,
          shelves: remainingShelves
        }
      }))
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–æ–π –ø–æ–ª–∫–∏
      setItems(prev => prev.filter(item => 
        !productsToDelete.some(product => product.id === item.id)
      ))
      
      toast.success(`–ü–æ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å ${productsToDelete.length} —Ç–æ–≤–∞—Ä–∞–º–∏`)
      setSelectedId(null)
      return
    }
    
    // –û–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–∫–∏, —Ç–æ–≤–∞—Ä—ã)
    const itemToDelete = items.find(item => item.id === id)
    if (itemToDelete) {
      setItems(prev => prev.filter(item => item.id !== id))
      toast.success('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω')
      setSelectedId(null)
    } else {
      console.warn('–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', id)
      toast.error('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
  }, [racks, items, mmToPixels])

  const exportToPNG = useCallback(() => {
    if (stageRef.current) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä Stage
      const stage = stageRef.current
      const originalScale = stage.scaleX()
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
      const scale = 2
      
      try {
        // –í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        stage.scale({ x: originalScale * scale, y: originalScale * scale })
        
        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        const dataURL = stage.toDataURL({ 
          mimeType: 'image/png',
          quality: 1,
          pixelRatio: scale // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        })
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—à—Ç–∞–±
        stage.scale({ x: originalScale, y: originalScale })
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const link = document.createElement('a')
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
        link.download = `planogram-${timestamp}.png`
        link.href = dataURL
        document.body.appendChild(link)
        link.click()
        document.body.removeChild(link)
        
        toast.success('–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ')
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error)
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—à—Ç–∞–± –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        stage.scale({ x: originalScale, y: originalScale })
        toast.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã')
      }
    }
  }, [])

  const savePlanogram = useCallback(async () => {
    // –ï—Å–ª–∏ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—É—é
    let planogramName = currentPlanogramName || ''
    let shouldUpdate = false
    
    if (currentPlanogramId && currentPlanogramName) {
      const action = confirm(
        `–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ "${currentPlanogramName}" —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.\n\n` +
        '–ù–∞–∂–º–∏—Ç–µ "–û–ö" —á—Ç–æ–±—ã –û–ë–ù–û–í–ò–¢–¨ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É,\n' +
        '–∏–ª–∏ "–û—Ç–º–µ–Ω–∞" —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—É—é.'
      )
      
      if (action) {
        shouldUpdate = true
      } else {
        const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã:', `${currentPlanogramName} (–∫–æ–ø–∏—è)`)
        if (!newName) return
        planogramName = newName
      }
    } else {
      const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã:', `–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ ${new Date().toLocaleDateString()}`)
      if (!newName) return
      planogramName = newName
    }

    try {
      const planogramData = {
        name: planogramName,
        category: '–û—Å–Ω–æ–≤–Ω–∞—è',
        items: items,
        racks: racks,
        settings: settings
      }

      if (shouldUpdate && currentPlanogramId) {
        await apiService.updatePlanogram(currentPlanogramId, planogramData)
        setCurrentPlanogramName(planogramName)
        toast.success(`–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ "${planogramName}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`)
      } else {
        const newPlanogram = await apiService.createPlanogram(planogramData)
        setCurrentPlanogramId(newPlanogram.id)
        setCurrentPlanogramName(newPlanogram.name)
        toast.success('–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –Ω–æ–≤–∞—è!')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã:', error)
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã')
    }
  }, [items, racks, settings, currentPlanogramId, currentPlanogramName])

  const createNewPlanogram = useCallback(() => {
    if (items.length > 0 || racks.length > 0) {
      const shouldClear = confirm(
        '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É?\n\n' +
        '–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.'
      )
      if (!shouldClear) return
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    setItems([])
    setRacks([])
    setSelectedId(null)
    setCurrentPlanogramId(null)
    setCurrentPlanogramName('')
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
    setSettings({
      gridSizeMm: 50,
      pixelsPerMm: 0.5,
      showGrid: true,
      snapToGrid: true,
      canvasWidth: 1200,
      canvasHeight: 800,
      showDimensions: true,
      show3D: true,
      defaultShelfDepth: 400
    })
    
    toast.success('–ù–æ–≤–∞—è –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞')
  }, [items.length, racks.length])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Delete' && selectedId) {
        deleteItem(selectedId)
      }
      if (e.key === 'Escape') {
        setSelectedId(null)
        setShowPropertiesModal(false)
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [selectedId, deleteItem])

  // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
  const selectedItem = (() => {
    if (!selectedId) return null
    
    // –ò—â–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ items (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–∫–∏, —Ç–æ–≤–∞—Ä—ã)
    const itemFound = items.find(item => item.id === selectedId)
    if (itemFound) return itemFound
    
    // –ò—â–µ–º —Å—Ä–µ–¥–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π
    const rackFound = racks.find(rack => rack.id === selectedId)
    if (rackFound) return rackFound
    
    // –ò—â–µ–º —Å—Ä–µ–¥–∏ –ø–æ–ª–æ–∫ —Å—Ç–µ–ª–ª–∞–∂–µ–π
    for (const rack of racks) {
      const shelfFound = rack.shelves.find(shelf => shelf.id === selectedId)
      if (shelfFound) return shelfFound
    }
    
    return null
  })()
  
  const isRack = selectedItem && 'levels' in selectedItem
  const isShelf = selectedItem && !isRack && selectedItem.type === 'shelf'

  return (
    <div className="h-screen bg-gray-50 flex">
      {/* Sidebar */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-gray-200">
          <h1 className="text-xl font-semibold text-gray-900 mb-2">–†–µ–¥–∞–∫—Ç–æ—Ä –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º</h1>
          
          {currentPlanogramName && (
            <p className="text-sm text-gray-600 mb-3">
              üìã {currentPlanogramName}
              {currentPlanogramId && <span className="text-green-600 ml-2">‚óè –û—Ç–∫—Ä—ã—Ç–∞</span>}
            </p>
          )}
          
          {/* Key Action Buttons */}
          <div className="flex gap-3 mb-3">
            <button
              onClick={savePlanogram}
              className="btn btn-success flex items-center gap-2 text-sm py-2 px-4 shadow-md flex-1"
              title={currentPlanogramId ? `–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É "${currentPlanogramName}"` : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É"}
            >
              <CloudArrowUpIcon className="w-5 h-5" />
              {currentPlanogramId ? '–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É'}
            </button>
            <button
              onClick={exportToPNG}
              className="btn btn-secondary flex items-center gap-2 text-sm py-2 px-4 shadow-md"
              title="–≠–∫—Å–ø–æ—Ä—Ç –≤ PNG"
            >
              <DocumentArrowDownIcon className="w-5 h-5" />
              –≠–∫—Å–ø–æ—Ä—Ç PNG
            </button>
          </div>
          
          {/* Secondary Action Buttons */}
          <div className="flex gap-2 flex-wrap">
            <button
              onClick={createNewPlanogram}
              className="btn btn-secondary flex items-center gap-1 text-sm py-1 px-2"
              title="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É"
            >
              <DocumentPlusIcon className="w-4 h-4" />
              –ù–æ–≤–∞—è
            </button>
            <button
              onClick={() => addShelf()}
              className="btn btn-primary flex items-center gap-1 text-sm py-1 px-2"
              title="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∫—É"
            >
              <RectangleStackIcon className="w-4 h-4" />
              –ü–æ–ª–∫–∞
            </button>
            <button
              onClick={() => addRack('gondola')}
              className="btn btn-primary flex items-center gap-1 text-sm py-1 px-2"
              title="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–µ–ª–ª–∞–∂"
            >
              <CubeIcon className="w-4 h-4" />
              –°—Ç–µ–ª–ª–∞–∂
            </button>
            {selectedId && (
              <button
                onClick={() => deleteItem(selectedId)}
                className="btn btn-danger flex items-center gap-1 text-sm py-1 px-2"
                title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
              >
                <TrashIcon className="w-4 h-4" />
                –£–¥–∞–ª–∏—Ç—å
              </button>
            )}
          </div>
        </div>

        {/* Settings */}
        <div className="p-3 border-b border-gray-200">
          <h3 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
            <Cog6ToothIcon className="w-4 h-4 mr-2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </h3>
          
          {/* –°–º–µ–Ω–∞ —Ç–∏–ø–∞ –ø–æ–ª–∫–∏ */}
          {isShelf && selectedItem && (
            <div className="mb-3 p-2 bg-blue-50 border border-blue-200 rounded">
              <label className="block text-xs font-medium text-blue-800 mb-1">
                –¢–∏–ø –ø–æ–ª–∫–∏:
              </label>
              <select
                value={selectedItem.shelfType || 'standard'}
                onChange={(e) => {
                  const newShelfType = e.target.value as any
                  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∫—É –≤ items –∏–ª–∏ –≤ racks
                  const itemInItems = items.find(item => item.id === selectedId)
                  if (itemInItems) {
                    setItems(prev => prev.map(item => 
                      item.id === selectedId 
                        ? { ...item, shelfType: newShelfType }
                        : item
                    ))
                  } else {
                    // –ò—â–µ–º –≤ –ø–æ–ª–∫–∞—Ö —Å—Ç–µ–ª–ª–∞–∂–µ–π
                    setRacks(prev => prev.map(rack => ({
                      ...rack,
                      shelves: rack.shelves.map(shelf => 
                        shelf.id === selectedId 
                          ? { ...shelf, shelfType: newShelfType }
                          : shelf
                      )
                    })))
                  }
                }}
                className="w-full text-xs p-1 border border-blue-300 rounded bg-white"
              >
                <option value="standard">üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è</option>
                <option value="hook">üëî –ö—Ä—é—á–∫–∏</option>
                <option value="basket">üß∫ –ö–æ—Ä–∑–∏–Ω–∞</option>
                <option value="divider">üìê –° —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏</option>
                <option value="slanted">üìê –ù–∞–∫–ª–æ–Ω–Ω–∞—è</option>
                <option value="wire">üîó –ü—Ä–æ–≤–æ–ª–æ—á–Ω–∞—è</option>
                <option value="bottle">üçæ –î–ª—è –±—É—Ç—ã–ª–æ–∫</option>
                <option value="pegboard">üî© –ü–µ—Ä—Ñ–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</option>
              </select>
            </div>
          )}
          
          {/* –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–æ–∫ */}
          <div className="mb-3">
            <label className="block text-xs font-medium text-gray-700 mb-1">
              –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∫—É:
            </label>
            <div className="grid grid-cols-2 gap-1">
              <button
                onClick={() => addShelf('standard')}
                className="text-xs p-1 bg-gray-100 hover:bg-gray-200 rounded border text-left"
                title="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–ª–∫–∞"
              >
                üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç
              </button>
              <button
                onClick={() => addShelf('hook')}
                className="text-xs p-1 bg-yellow-100 hover:bg-yellow-200 rounded border text-left"
                title="–ü–æ–ª–∫–∞ —Å –∫—Ä—é—á–∫–∞–º–∏"
              >
                üëî –ö—Ä—é—á–∫–∏
              </button>
              <button
                onClick={() => addShelf('basket')}
                className="text-xs p-1 bg-blue-100 hover:bg-blue-200 rounded border text-left"
                title="–ö–æ—Ä–∑–∏–Ω–∞"
              >
                üß∫ –ö–æ—Ä–∑–∏–Ω–∞
              </button>
              <button
                onClick={() => addShelf('wire')}
                className="text-xs p-1 bg-gray-100 hover:bg-gray-200 rounded border text-left"
                title="–ü—Ä–æ–≤–æ–ª–æ—á–Ω–∞—è –ø–æ–ª–∫–∞"
              >
                üîó –ü—Ä–æ–≤–æ–ª–æ—á–Ω–∞—è
              </button>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-2 mb-3">
            <label className="flex items-center text-xs text-gray-700">
              <input
                type="checkbox"
                checked={settings.showGrid}
                onChange={(e) => setSettings(prev => ({ ...prev, showGrid: e.target.checked }))}
                className="mr-1"
              />
              –°–µ—Ç–∫–∞
            </label>
            
            <label className="flex items-center text-xs text-gray-700">
              <input
                type="checkbox"
                checked={settings.snapToGrid}
                onChange={(e) => setSettings(prev => ({ ...prev, snapToGrid: e.target.checked }))}
                className="mr-1"
              />
              –ü—Ä–∏–≤—è–∑–∫–∞
            </label>
            
            <label className="flex items-center text-xs text-gray-700">
              <input
                type="checkbox"
                checked={settings.showDimensions}
                onChange={(e) => setSettings(prev => ({ ...prev, showDimensions: e.target.checked }))}
                className="mr-1"
              />
              –†–∞–∑–º–µ—Ä—ã
            </label>
            
            <label className="flex items-center text-xs text-gray-700">
              <input
                type="checkbox"
                checked={settings.show3D}
                onChange={(e) => setSettings(prev => ({ ...prev, show3D: e.target.checked }))}
                className="mr-1"
              />
              3D
            </label>
          </div>
          
          <div className="space-y-2">
            <div>
              <label className="block text-xs text-gray-600 mb-1">
                –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ (–º–º)
              </label>
              <select
                value={settings.gridSizeMm}
                onChange={(e) => setSettings(prev => ({ ...prev, gridSizeMm: Number(e.target.value) }))}
                className="input w-full text-sm h-8"
              >
                <option value={10}>10–º–º - –º–µ–ª–∫–∞—è</option>
                <option value={25}>25–º–º - —Å—Ä–µ–¥–Ω—è—è</option>
                <option value={50}>50–º–º - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è</option>
                <option value={100}>100–º–º - –∫—Ä—É–ø–Ω–∞—è</option>
                <option value={200}>200–º–º - –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω–∞—è</option>
              </select>
            </div>
            
            <div>
              <label className="block text-xs text-gray-600 mb-1">
                –ú–∞—Å—à—Ç–∞–± (px/–º–º)
              </label>
              <input
                type="number"
                step="0.1"
                value={settings.pixelsPerMm}
                onChange={(e) => setSettings(prev => ({ ...prev, pixelsPerMm: Number(e.target.value) }))}
                className="input w-full text-sm h-8"
                min="0.1"
                max="2"
              />
            </div>
          </div>
        </div>

        {/* Products Catalog */}
        <div className="flex-1 p-3 flex flex-col min-h-0">
          <h3 className="text-sm font-medium text-gray-900 mb-2">
            –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
          </h3>
          
          {/* Category Filter */}
          <div className="mb-3">
            <label className="block text-xs font-medium text-gray-700 mb-1">
              –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
            </label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full text-xs p-2 border border-gray-300 rounded bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="all">üì¶ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({products.length})</option>
              {categories.slice(1).map(category => {
                const count = products.filter(p => p.category === category).length
                return (
                  <option key={category} value={category}>
                    {category} ({count})
                  </option>
                )
              })}
            </select>
          </div>
          
          <div className="space-y-2 overflow-y-auto flex-1">
            {productsLoading ? (
              <div className="flex justify-center items-center py-8">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500"></div>
                <span className="ml-2 text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
              </div>
            ) : (
              filteredProducts.map((product) => (
              <div
                key={product.id}
                className="p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors"
                onClick={() => addProduct(product)}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium text-sm text-gray-900">
                      {product.name}
                    </p>
                    <p className="text-xs text-gray-500">
                      {product.width}√ó{product.height}√ó{product.depth}–º–º
                    </p>
                    <p className="text-xs text-gray-400">
                      {product.category}
                    </p>
                  </div>
                  {product.imageUrl ? (
                    <img
                      src={product.imageUrl}
                      alt={product.name}
                      className="w-8 h-8 rounded border border-gray-300 object-cover"
                    />
                  ) : (
                    <div
                      className="w-8 h-8 rounded border border-gray-300"
                      style={{ backgroundColor: product.color }}
                    />
                  )}
                </div>
              </div>
              ))
            )}
          </div>
          
          {/* Properties Button */}
          {selectedId && (
            <div className="mt-3 pt-3 border-t border-gray-200">
              <button
                onClick={() => setShowPropertiesModal(true)}
                className="btn btn-secondary w-full flex items-center justify-center gap-2 text-sm py-2"
                title="–°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"
              >
                <Cog6ToothIcon className="w-4 h-4" />
                –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Canvas */}
      <div className="flex-1 bg-gray-100 p-4">
        <div className="bg-white rounded-lg shadow-sm h-full">
          {/* Canvas Info */}
          <div className="p-3 border-b border-gray-200 bg-gray-50 text-xs text-gray-600">
            –†–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞: {Math.round(settings.canvasWidth / settings.pixelsPerMm)}√ó{Math.round(settings.canvasHeight / settings.pixelsPerMm)}–º–º 
            | –°–µ—Ç–∫–∞: {settings.gridSizeMm}–º–º 
            | –ú–∞—Å—à—Ç–∞–±: {settings.pixelsPerMm}px/–º–º
            {settings.snapToGrid && ' | –ü—Ä–∏–≤—è–∑–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'}
            {selectedItem && ` | –í—ã–±—Ä–∞–Ω: ${isRack ? selectedItem.name : selectedItem.product?.name || '–≠–ª–µ–º–µ–Ω—Ç'}`}
          </div>
          
          <Stage
            ref={stageRef}
            width={settings.canvasWidth}
            height={settings.canvasHeight}
            onMouseDown={(e) => {
              const clickedOnEmpty = e.target === e.target.getStage()
              if (clickedOnEmpty) {
                setSelectedId(null)
              }
            }}
          >
            {/* –°–ª–æ–π —Å–µ—Ç–∫–∏ */}
            <Layer>
              {/* Grid */}
              {settings.showGrid && (() => {
                const gridSizePixels = mmToPixels(settings.gridSizeMm)
                const verticalLines = Math.ceil(settings.canvasWidth / gridSizePixels)
                const horizontalLines = Math.ceil(settings.canvasHeight / gridSizePixels)
                
                return (
                  <>
                    {Array.from({ length: verticalLines }, (_, i) => (
                      <Group key={`grid-v-${i}`}>
                        <Rect
                          x={i * gridSizePixels}
                          y={0}
                          width={1}
                          height={settings.canvasHeight}
                          fill="#f3f4f6"
                        />
                      </Group>
                    ))}
                    {Array.from({ length: horizontalLines }, (_, i) => (
                      <Group key={`grid-h-${i}`}>
                        <Rect
                          x={0}
                          y={i * gridSizePixels}
                          width={settings.canvasWidth}
                          height={1}
                          fill="#f3f4f6"
                        />
                      </Group>
                    ))}
                  </>
                )
              })()}
            </Layer>

            {/* –°–ª–æ–π —Å—Ç–µ–ª–ª–∞–∂–µ–π */}
            <Layer>
              {racks.map((rack) => (
                <RackSystem3D
                  key={rack.id}
                  rack={rack}
                  settings={settings}
                  x={rack.x}
                  y={rack.y}
                  isSelected={selectedId === rack.id}
                  onClick={() => setSelectedId(rack.id)}
                  onDragEnd={(e) => {
                    const newX = snapToGrid(e.target.x())
                    const newY = snapToGrid(e.target.y())
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
                    const deltaX = newX - rack.x
                    const deltaY = newY - rack.y
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç–µ–ª–ª–∞–∂–∞ –ò –ø–æ–∑–∏—Ü–∏–∏ –µ–≥–æ –ø–æ–ª–æ–∫
                    setRacks(prev => prev.map(r => 
                      r.id === rack.id 
                        ? { 
                            ...r, 
                            x: newX, 
                            y: newY,
                            // üéØ –û–ë–ù–û–í–õ–Ø–ï–ú –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Å—Ç–µ–ª–ª–∞–∂–∞
                            shelves: r.shelves.map(shelf => ({
                              ...shelf,
                              x: shelf.x + deltaX,
                              y: shelf.y + deltaY
                            }))
                          }
                        : r
                    ))
                    
                    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–æ–ª–∫–∞—Ö —Å—Ç–µ–ª–ª–∞–∂–∞
                    setItems(prev => prev.map(item => {
                      // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∫ —Å—Ç–µ–ª–ª–∞–∂—É –ø–æ rackId
                      if (item.type === 'product' && item.rackId === rack.id) {
                        return { ...item, x: item.x + deltaX, y: item.y + deltaY }
                      }
                      return item
                    }))
                  }}
                />
              ))}
            </Layer>

            {/* –°–ª–æ–π –ø–æ–ª–æ–∫ —Å—Ç–µ–ª–ª–∞–∂–µ–π */}
            <Layer>
              {(() => {
                const rackShelves = racks.flatMap(rack => rack.shelves)
                console.log('üèóÔ∏è –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª–æ–∫ —Å—Ç–µ–ª–ª–∞–∂–µ–π:', {
                  racksCount: racks.length,
                  totalShelves: rackShelves.length,
                  shelves: rackShelves.map(s => ({
                    id: s.id,
                    x: s.x,
                    y: s.y,
                    width: s.width,
                    height: s.height
                  }))
                })
                return rackShelves.map(shelf => (
                  <EnhancedShelf
                    key={shelf.id}
                    shelf={shelf}
                    settings={settings}
                    isSelected={selectedId === shelf.id}
                    onClick={() => setSelectedId(shelf.id)}
                    onDragEnd={() => {}} // –ü–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
                    onTransformEnd={() => {}} // –ü–æ–ª–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–µ–π –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
                    onDistributeProducts={distributeProductsEvenly}
                  />
                ))
              })()}
            </Layer>

            {/* –°–ª–æ–π –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–æ–∫ */}
            <Layer>
              {items.filter(item => item.type === 'shelf').map((item) => (
                  <EnhancedShelf
                    key={item.id}
                    shelf={item}
                    settings={settings}
                    isSelected={selectedId === item.id}
                    onClick={() => setSelectedId(item.id)}
                    onDragEnd={(e) => {
                      const newX = snapToGrid(e.target.x())
                      const newY = snapToGrid(e.target.y())
                      setItems(prev => prev.map(i => 
                        i.id === item.id 
                          ? { ...i, x: newX, y: newY }
                          : i
                      ))
                    }}
                    onTransformEnd={(e) => {
                      console.log('üîÑ Transform end:', e)
                      setItems(prev => prev.map(i => 
                        i.id === item.id 
                          ? { 
                              ...i, 
                              width: snapToGrid(e.width), 
                              height: snapToGrid(e.height) 
                            }
                          : i
                      ))
                      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫ –Ω–æ–≤–æ–π –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–∫–∏
                      setTimeout(() => repositionProductsOnShelf(item.id), 200)
                    }}
                    onDistributeProducts={distributeProductsEvenly}
                  />
                ))}
            </Layer>

            {/* –°–ª–æ–π —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ) */}
            <Layer>
              {items.filter(item => item.type === 'product').map((item) => (
                <PlanogramItem
                  key={item.id}
                  item={item}
                  isSelected={selectedId === item.id}
                  image={item.product?.imageUrl ? images[item.product.imageUrl] : undefined}
                  onClick={() => setSelectedId(item.id)}
                  onDragEnd={(e) => {
                    const newX = snapToGrid(e.target.x())
                    const newY = snapToGrid(e.target.y())
                    setItems(prev => prev.map(i => 
                      i.id === item.id 
                        ? { ...i, x: newX, y: newY }
                        : i
                    ))
                  }}
                />
              ))}
            </Layer>
          </Stage>
        </div>
      </div>

      {/* Properties Modal */}
      {showPropertiesModal && selectedItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full m-4 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
              </h3>
              <button
                onClick={() => setShowPropertiesModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>
            
            <div className="space-y-4 text-sm">
              <div>
                <strong>
                  {isRack 
                    ? selectedItem.name 
                    : selectedItem.product?.name || '–ü–æ–ª–∫–∞'
                  }
                </strong>
              </div>
              
              {isRack ? (
                <>
                  <div className="text-gray-600">
                    –¢–∏–ø: {selectedItem.type === 'gondola' ? '–ì–æ–Ω–¥–æ–ª–∞' : selectedItem.type === 'wall' ? '–ü—Ä–∏—Å—Ç–µ–Ω–Ω—ã–π' : selectedItem.type === 'endcap' ? '–¢–æ—Ä—Ü–µ–≤–æ–π' : '–û—Å—Ç—Ä–æ–≤–Ω–æ–π'}
                  </div>
                  
                  <div className="border-t pt-3">
                    <h4 className="text-sm font-medium text-gray-800 mb-3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–∞:</h4>
                    <div className="space-y-3">
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">
                          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π:
                        </label>
                        <input
                          type="number"
                          value={selectedItem.levels}
                          onChange={(e) => {
                            const newLevels = Math.max(1, Math.min(8, Number(e.target.value)))
                            updateRackShelves(selectedItem.id, newLevels)
                          }}
                          className="input w-full text-sm h-8"
                          min="1"
                          max="8"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">
                          –®–∏—Ä–∏–Ω–∞ (–º–º):
                        </label>
                        <input
                          type="number"
                          value={selectedItem.width}
                          onChange={(e) => {
                            const newWidth = Number(e.target.value)
                            updateRackDimensions(selectedItem.id, { width: newWidth })
                          }}
                          className="input w-full text-sm h-8"
                          min="400"
                          max="3000"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">
                          –í—ã—Å–æ—Ç–∞ (–º–º):
                        </label>
                        <input
                          type="number"
                          value={selectedItem.height}
                          onChange={(e) => {
                            const newHeight = Number(e.target.value)
                            updateRackDimensions(selectedItem.id, { height: newHeight })
                          }}
                          className="input w-full text-sm h-8"
                          min="800"
                          max="3000"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">
                          –ì–ª—É–±–∏–Ω–∞ (–º–º):
                        </label>
                        <input
                          type="number"
                          value={selectedItem.depth}
                          onChange={(e) => {
                            const newDepth = Number(e.target.value)
                            updateRackDimensions(selectedItem.id, { depth: newDepth })
                          }}
                          className="input w-full text-sm h-8"
                          min="200"
                          max="800"
                        />
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <div className="text-gray-600">
                    –ü–æ–∑–∏—Ü–∏—è: ({Math.round(selectedItem.x / settings.pixelsPerMm)}, {Math.round(selectedItem.y / settings.pixelsPerMm)})–º–º
                  </div>
                  
                  {isShelf && (
                    <div className="border-t pt-3">
                      <h4 className="text-sm font-medium text-gray-800 mb-3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:</h4>
                      <div className="space-y-3">
                        <div>
                          <label className="block text-xs text-gray-600 mb-1">
                            –®–∏—Ä–∏–Ω–∞ (–º–º):
                          </label>
                          <input
                            type="number"
                            value={Math.round(selectedItem.width / settings.pixelsPerMm)}
                            onChange={(e) => {
                              const newWidthMm = Number(e.target.value)
                              const newWidthPx = newWidthMm * settings.pixelsPerMm
                              setItems(prev => prev.map(item => 
                                item.id === selectedId 
                                  ? { ...item, width: newWidthPx }
                                  : item
                              ))
                            }}
                            onBlur={() => {
                              // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
                              setTimeout(() => repositionProductsOnShelf(selectedId!), 100)
                            }}
                            className="input w-full text-sm h-8"
                            min="50"
                            max="2000"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-600 mb-1">
                            –í—ã—Å–æ—Ç–∞ (–º–º):
                          </label>
                          <input
                            type="number"
                            value={Math.round(selectedItem.height / settings.pixelsPerMm)}
                            onChange={(e) => {
                              const newHeightMm = Number(e.target.value)
                              const newHeightPx = newHeightMm * settings.pixelsPerMm
                              setItems(prev => prev.map(item => 
                                item.id === selectedId 
                                  ? { ...item, height: newHeightPx }
                                  : item
                              ))
                            }}
                            onBlur={() => {
                              // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
                              setTimeout(() => repositionProductsOnShelf(selectedId!), 100)
                            }}
                            className="input w-full text-sm h-8"
                            min="20"
                            max="500"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-600 mb-1">
                            –ì–ª—É–±–∏–Ω–∞ (–º–º):
                          </label>
                          <input
                            type="number"
                            value={selectedItem.depth || settings.defaultShelfDepth}
                            onChange={(e) => {
                              const newDepth = Number(e.target.value)
                              setItems(prev => prev.map(item => 
                                item.id === selectedId 
                                  ? { ...item, depth: newDepth }
                                  : item
                              ))
                            }}
                            className="input w-full text-sm h-8"
                            min="100"
                            max="800"
                          />
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {selectedItem.product && (
                    <div className="border-t pt-3">
                      <h4 className="text-sm font-medium text-gray-800 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</h4>
                      <div className="text-gray-600">
                        –†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {selectedItem.product.width}√ó{selectedItem.product.height}√ó{selectedItem.product.depth}–º–º
                      </div>
                      <div className="text-gray-600">
                        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selectedItem.product.category}
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
            
            <div className="flex justify-end mt-6">
              <button
                onClick={() => setShowPropertiesModal(false)}
                className="btn btn-secondary"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 