import { useState, useRef, useCallback, useEffect } from 'react'
import { Stage, Layer, Rect, Text, Group, Image as KonvaImage, Transformer } from 'react-konva'
import { 
  PlusIcon, 
  TrashIcon, 
  DocumentArrowDownIcon,
  Cog6ToothIcon,
  CubeIcon,
  RectangleStackIcon,
  CloudArrowUpIcon
} from '@heroicons/react/24/outline'
import toast from 'react-hot-toast'
import { Product, ShelfItem, PlanogramSettings, RackSystem } from '../types'
import PlanogramItem from '../components/PlanogramItem'
import EnhancedShelf from '../components/EnhancedShelf'
import RackSystem3D from '../components/RackSystem3D'
import { apiService } from '../services/api'

export default function PlanogramEditor() {
  const [items, setItems] = useState<ShelfItem[]>([])
  const [racks, setRacks] = useState<RackSystem[]>([])
  const [selectedId, setSelectedId] = useState<string | null>(null)
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null)
  const [products, setProducts] = useState<Product[]>([])
  const [productsLoading, setProductsLoading] = useState(true)
  const [showPropertiesModal, setShowPropertiesModal] = useState(false)
  const [settings, setSettings] = useState<PlanogramSettings>({
    gridSizeMm: 50,
    pixelsPerMm: 0.5,
    showGrid: true,
    snapToGrid: true,
    canvasWidth: 1200,
    canvasHeight: 800,
    showDimensions: true,
    show3D: true,
    defaultShelfDepth: 400
  })
  const [images, setImages] = useState<{ [key: string]: HTMLImageElement }>({})
  const stageRef = useRef<any>(null)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadProducts()
    loadPlanogramFromUrl()
  }, [])

  const loadPlanogramFromUrl = async () => {
    const urlParams = new URLSearchParams(window.location.search)
    const planogramId = urlParams.get('planogram')
    
    if (planogramId) {
      try {
        const planogram = await apiService.getPlanogram(planogramId)
        setItems(planogram.items || [])
        setRacks(planogram.racks || [])
        setSettings(prev => ({ ...prev, ...planogram.settings }))
        toast.success(`–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ "${planogram.name}" –∑–∞–≥—Ä—É–∂–µ–Ω–∞`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã:', error)
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É')
      }
    }
  }

  const loadProducts = async () => {
    try {
      setProductsLoading(true)
      const productsData = await apiService.getProducts()
      setProducts(productsData)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤')
    } finally {
      setProductsLoading(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const loadImage = useCallback((imageUrl: string): Promise<HTMLImageElement> => {
    return new Promise((resolve, reject) => {
      if (images[imageUrl]) {
        resolve(images[imageUrl])
        return
      }

      const img = new Image()
      img.crossOrigin = 'anonymous'
      img.onload = () => {
        setImages(prev => ({ ...prev, [imageUrl]: img }))
        resolve(img)
      }
      img.onerror = reject
      img.src = imageUrl.startsWith('/') ? `http://localhost:4000${imageUrl}` : imageUrl
    })
  }, [images])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ items
  useEffect(() => {
    items.forEach(item => {
      if (item.product?.imageUrl) {
        loadImage(item.product.imageUrl)
      }
    })
  }, [items, loadImage])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–º –≤ –ø–∏–∫—Å–µ–ª–∏
  const mmToPixels = useCallback((mm: number) => mm * settings.pixelsPerMm, [settings.pixelsPerMm])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Ç–∫–µ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
  const snapToGrid = useCallback((value: number) => {
    if (!settings.snapToGrid) return value
    const gridSizePixels = mmToPixels(settings.gridSizeMm)
    return Math.round(value / gridSizePixels) * gridSizePixels
  }, [settings.gridSizeMm, settings.snapToGrid, mmToPixels])

  const addShelf = useCallback((shelfType: 'standard' | 'hook' | 'basket' | 'divider' = 'standard') => {
    const newShelf: ShelfItem = {
      id: `shelf-${Date.now()}`,
      x: snapToGrid(50),
      y: snapToGrid(50),
      width: mmToPixels(800),
      height: mmToPixels(120),
      depth: settings.defaultShelfDepth,
      type: 'shelf',
      shelfType,
      resizable: true,
      maxLoad: shelfType === 'hook' ? 5 : shelfType === 'basket' ? 10 : 20
    }
    setItems(prev => [...prev, newShelf])
    toast.success(`–ü–æ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞`)
  }, [snapToGrid, mmToPixels, settings.defaultShelfDepth])

  const addRack = useCallback((rackType: 'gondola' | 'wall' | 'endcap' | 'island') => {
    const newRack: RackSystem = {
      id: `rack-${Date.now()}`,
      name: `–°—Ç–µ–ª–ª–∞–∂`,
      type: rackType,
      width: 1200,
      height: 1800,
      depth: 400,
      levels: 4,
      shelves: []
    }
    setRacks(prev => [...prev, newRack])
    toast.success('–°—Ç–µ–ª–ª–∞–∂ –¥–æ–±–∞–≤–ª–µ–Ω')
  }, [])

  const addProduct = useCallback((product: Product) => {
    if (!selectedId) {
      toast.error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∫—É')
      return
    }

    const shelf = items.find(item => item.id === selectedId && item.type === 'shelf')
    if (!shelf) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª–∫–∏ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–∫–∏ –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –≤ –º–º)
    const shelfHeightMm = Math.round(shelf.height / settings.pixelsPerMm)
    const shelfDepthMm = shelf.depth || 400

    if (product.height > shelfHeightMm) {
      toast.error(`–¢–æ–≤–∞—Ä —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –¥–ª—è –ø–æ–ª–∫–∏ (${product.height}–º–º > ${shelfHeightMm}–º–º)`)
      return
    }

    if (product.depth > shelfDepthMm) {
      toast.error(`–¢–æ–≤–∞—Ä —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–∏–π –¥–ª—è –ø–æ–ª–∫–∏ (${product.depth}–º–º > ${shelfDepthMm}–º–º)`)
      return
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    const productWidthPx = mmToPixels(product.width)
    const productHeightPx = mmToPixels(product.height)
    
    // –í—ã—á–∏—Å–ª—è–µ–º Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç–æ–≤–∞—Ä–∞ (–≤–Ω–∏–∑—É –ø–æ–ª–∫–∏)
    const productY = shelf.y + shelf.height - productHeightPx - 5 // 5px –æ—Ç—Å—Ç—É–ø –æ—Ç –¥–Ω–∞ –ø–æ–ª–∫–∏
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –ø–æ–ª–∫–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏ –ø–æ Y)
    const POSITION_TOLERANCE = 20 // –ø–∏–∫—Å–µ–ª–µ–π
    const productsOnShelf = items.filter(item => 
      item.type === 'product' && 
      Math.abs(item.y - productY) <= POSITION_TOLERANCE &&
      item.x >= shelf.x - 10 && // –Ω–µ–±–æ–ª—å—à–∞—è —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å–ª–µ–≤–∞ 
      item.x <= shelf.x + shelf.width + 10 // –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª–∫–∏
    )

    console.log('üîç DEBUG addProduct:')
    console.log('–ü–æ–ª–∫–∞:', { x: shelf.x, y: shelf.y, width: shelf.width, height: shelf.height })
    console.log('–¢–æ–≤–∞—Ä—ã –Ω–∞ –ø–æ–ª–∫–µ:', productsOnShelf.map(p => ({ 
      name: p.product?.name, 
      x: p.x, 
      y: p.y, 
      width: p.width, 
      height: p.height 
    })))
    console.log('–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä Y:', productY)

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–Ω—è—Ç—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –Ω–∞ –ø–æ–ª–∫–µ
    const occupiedSpaces = productsOnShelf
      .map(item => ({
        start: item.x,
        end: item.x + item.width,
        product: item.product?.name || '–¢–æ–≤–∞—Ä'
      }))
      .sort((a, b) => a.start - b.start)

    console.log('–ó–∞–Ω—è—Ç—ã–µ —É—á–∞—Å—Ç–∫–∏:', occupiedSpaces)

    // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    const GAP = 5 // –∑–∞–∑–æ—Ä –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    let nextX = shelf.x + 5 // –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –ø–æ–ª–∫–∏

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–Ω—è—Ç—ã–º —É—á–∞—Å—Ç–∫–∞–º –∏ –∏—â–µ–º –º–µ—Å—Ç–æ
    for (const space of occupiedSpaces) {
      if (nextX + productWidthPx + GAP <= space.start) {
        // –¢–æ–≤–∞—Ä –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —É—á–∞—Å—Ç–∫–æ–º
        console.log(`‚úÖ –ú–µ—Å—Ç–æ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–¥ —Ç–æ–≤–∞—Ä–æ–º ${space.product}, –ø–æ–∑–∏—Ü–∏—è X: ${nextX}`)
        break
      }
      // –°–¥–≤–∏–≥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞ —Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–æ–∫
      nextX = space.end + GAP
      console.log(`‚û°Ô∏è –°–¥–≤–∏–≥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞ —Ç–æ–≤–∞—Ä ${space.product}, –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è X: ${nextX}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ –Ω–∞ –ø–æ–ª–∫–µ
    const shelfRightEdge = shelf.x + shelf.width
    if (nextX + productWidthPx > shelfRightEdge) {
      const availableWidthMm = Math.round((shelfRightEdge - nextX) / settings.pixelsPerMm)
      toast.error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –ø–æ–ª–∫–µ (–Ω—É–∂–Ω–æ ${product.width}–º–º, –¥–æ—Å—Ç—É–ø–Ω–æ ${availableWidthMm}–º–º)`)
      return
    }

    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ X:', nextX, 'Y:', productY)

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    const newProduct: ShelfItem = {
      id: `product-${Date.now()}`,
      x: snapToGrid(nextX),
      y: snapToGrid(productY),
      width: productWidthPx,
      height: productHeightPx,
      depth: product.depth,
      product,
      type: 'product'
    }

    setItems(prev => [...prev, newProduct])
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
    const remainingWidthMm = Math.round((shelfRightEdge - nextX - productWidthPx) / settings.pixelsPerMm)
    toast.success(`–¢–æ–≤–∞—Ä "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω. –°–≤–æ–±–æ–¥–Ω–æ: ${remainingWidthMm}–º–º`)
  }, [selectedId, items, snapToGrid, mmToPixels, settings.pixelsPerMm])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–∫–∏
  const repositionProductsOnShelf = useCallback((shelfId: string) => {
    const shelf = items.find(item => item.id === shelfId)
    if (!shelf) return

    setItems(prev => prev.map(item => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ–≤–∞—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–æ–ª–∫–µ
      if (item.type === 'product' && 
          item.x >= shelf.x && 
          item.x < shelf.x + shelf.width &&
          item.y >= shelf.y && 
          item.y < shelf.y + shelf.height + 100) { // 100px —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–∫–∏
        const newY = shelf.y + shelf.height - item.height - 5 // 5px –æ—Ç—Å—Ç—É–ø –æ—Ç –¥–Ω–∞
        return {
          ...item,
          y: snapToGrid(newY)
        }
      }
      return item
    }))
  }, [items, snapToGrid])

  const deleteItem = useCallback((id: string) => {
    setItems(prev => prev.filter(item => item.id !== id))
    setRacks(prev => prev.filter(rack => rack.id !== id))
    setSelectedId(null)
    toast.success('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω')
  }, [])

  const exportToPNG = useCallback(() => {
    if (stageRef.current) {
      const dataURL = stageRef.current.toDataURL({ mimeType: 'image/png', quality: 1 })
      const link = document.createElement('a')
      link.download = `planogram-${Date.now()}.png`
      link.href = dataURL
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      toast.success('–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞')
    }
  }, [])

  const savePlanogram = useCallback(async () => {
    const planogramName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã:', `–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ ${new Date().toLocaleDateString()}`)
    if (!planogramName) return

    try {
      const planogramData = {
        name: planogramName,
        category: '–û—Å–Ω–æ–≤–Ω–∞—è',
        items: items,
        racks: racks,
        settings: settings
      }

      await apiService.createPlanogram(planogramData)
      toast.success('–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã:', error)
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã')
    }
  }, [items, racks, settings])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Delete' && selectedId) {
        deleteItem(selectedId)
      }
      if (e.key === 'Escape') {
        setSelectedId(null)
        setShowPropertiesModal(false)
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [selectedId, deleteItem])

  // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
  const selectedItem = selectedId ? (items.find(item => item.id === selectedId) || racks.find(rack => rack.id === selectedId)) : null
  const isRack = selectedItem && 'levels' in selectedItem
  const isShelf = selectedItem && !isRack && selectedItem.type === 'shelf'

  return (
    <div className="h-screen bg-gray-50 flex">
      {/* Sidebar */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-gray-200">
          <h1 className="text-xl font-semibold text-gray-900">–†–µ–¥–∞–∫—Ç–æ—Ä –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º</h1>
          <div className="bg-green-50 border border-green-200 rounded-lg p-2 mt-2 mb-3">
            <p className="text-xs text-green-700">
              üìê –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã
            </p>
          </div>
          <div className="flex gap-2 mt-3">
            <button
              onClick={() => addShelf()}
              className="btn btn-primary flex items-center gap-1 text-sm py-1 px-2"
              title="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∫—É"
            >
              <RectangleStackIcon className="w-4 h-4" />
              –ü–æ–ª–∫–∞
            </button>
            <button
              onClick={() => addRack('gondola')}
              className="btn btn-primary flex items-center gap-1 text-sm py-1 px-2"
              title="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–µ–ª–ª–∞–∂"
            >
              <CubeIcon className="w-4 h-4" />
              –°—Ç–µ–ª–ª–∞–∂
            </button>
            <button
              onClick={savePlanogram}
              className="btn btn-success flex items-center gap-1 text-sm py-1 px-2"
              title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—É"
            >
              <CloudArrowUpIcon className="w-4 h-4" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button
              onClick={exportToPNG}
              className="btn btn-secondary flex items-center gap-1 text-sm py-1 px-2"
              title="–≠–∫—Å–ø–æ—Ä—Ç –≤ PNG"
            >
              <DocumentArrowDownIcon className="w-4 h-4" />
              PNG
            </button>
            {selectedId && (
              <button
                onClick={() => deleteItem(selectedId)}
                className="btn btn-danger flex items-center gap-1 text-sm py-1 px-2"
                title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
              >
                <TrashIcon className="w-4 h-4" />
                –£–¥–∞–ª–∏—Ç—å
              </button>
            )}
          </div>
        </div>

        {/* Settings */}
        <div className="p-3 border-b border-gray-200">
          <h3 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
            <Cog6ToothIcon className="w-4 h-4 mr-2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </h3>
          
          <div className="grid grid-cols-2 gap-2 mb-3">
            <label className="flex items-center text-xs text-gray-700">
              <input
                type="checkbox"
                checked={settings.showGrid}
                onChange={(e) => setSettings(prev => ({ ...prev, showGrid: e.target.checked }))}
                className="mr-1"
              />
              –°–µ—Ç–∫–∞
            </label>
            
            <label className="flex items-center text-xs text-gray-700">
              <input
                type="checkbox"
                checked={settings.snapToGrid}
                onChange={(e) => setSettings(prev => ({ ...prev, snapToGrid: e.target.checked }))}
                className="mr-1"
              />
              –ü—Ä–∏–≤—è–∑–∫–∞
            </label>
            
            <label className="flex items-center text-xs text-gray-700">
              <input
                type="checkbox"
                checked={settings.showDimensions}
                onChange={(e) => setSettings(prev => ({ ...prev, showDimensions: e.target.checked }))}
                className="mr-1"
              />
              –†–∞–∑–º–µ—Ä—ã
            </label>
            
            <label className="flex items-center text-xs text-gray-700">
              <input
                type="checkbox"
                checked={settings.show3D}
                onChange={(e) => setSettings(prev => ({ ...prev, show3D: e.target.checked }))}
                className="mr-1"
              />
              3D
            </label>
          </div>
          
          <div className="space-y-2">
            <div>
              <label className="block text-xs text-gray-600 mb-1">
                –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ (–º–º)
              </label>
              <select
                value={settings.gridSizeMm}
                onChange={(e) => setSettings(prev => ({ ...prev, gridSizeMm: Number(e.target.value) }))}
                className="input w-full text-sm h-8"
              >
                <option value={10}>10–º–º - –º–µ–ª–∫–∞—è</option>
                <option value={25}>25–º–º - —Å—Ä–µ–¥–Ω—è—è</option>
                <option value={50}>50–º–º - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è</option>
                <option value={100}>100–º–º - –∫—Ä—É–ø–Ω–∞—è</option>
                <option value={200}>200–º–º - –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω–∞—è</option>
              </select>
            </div>
            
            <div>
              <label className="block text-xs text-gray-600 mb-1">
                –ú–∞—Å—à—Ç–∞–± (px/–º–º)
              </label>
              <input
                type="number"
                step="0.1"
                value={settings.pixelsPerMm}
                onChange={(e) => setSettings(prev => ({ ...prev, pixelsPerMm: Number(e.target.value) }))}
                className="input w-full text-sm h-8"
                min="0.1"
                max="2"
              />
            </div>
          </div>
        </div>

        {/* Products Catalog */}
        <div className="flex-1 p-3 flex flex-col min-h-0">
          <h3 className="text-sm font-medium text-gray-900 mb-2">
            –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
          </h3>
          <div className="space-y-2 overflow-y-auto flex-1">
            {productsLoading ? (
              <div className="flex justify-center items-center py-8">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500"></div>
                <span className="ml-2 text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
              </div>
            ) : (
              products.map((product) => (
              <div
                key={product.id}
                className="p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors"
                onClick={() => addProduct(product)}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium text-sm text-gray-900">
                      {product.name}
                    </p>
                    <p className="text-xs text-gray-500">
                      {product.width}√ó{product.height}√ó{product.depth}–º–º
                    </p>
                    <p className="text-xs text-gray-400">
                      {product.category}
                    </p>
                  </div>
                  {product.imageUrl ? (
                    <img
                      src={product.imageUrl.startsWith('/') ? `http://localhost:4000${product.imageUrl}` : product.imageUrl}
                      alt={product.name}
                      className="w-8 h-8 rounded border border-gray-300 object-cover"
                    />
                  ) : (
                    <div
                      className="w-8 h-8 rounded border border-gray-300"
                      style={{ backgroundColor: product.color }}
                    />
                  )}
                </div>
              </div>
              ))
            )}
          </div>
          
          {/* Properties Button */}
          {selectedId && (
            <div className="mt-3 pt-3 border-t border-gray-200">
              <button
                onClick={() => setShowPropertiesModal(true)}
                className="btn btn-secondary w-full flex items-center justify-center gap-2 text-sm py-2"
                title="–°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"
              >
                <Cog6ToothIcon className="w-4 h-4" />
                –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Canvas */}
      <div className="flex-1 bg-gray-100 p-4">
        <div className="bg-white rounded-lg shadow-sm h-full">
          {/* Canvas Info */}
          <div className="p-3 border-b border-gray-200 bg-gray-50 text-xs text-gray-600">
            –†–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞: {Math.round(settings.canvasWidth / settings.pixelsPerMm)}√ó{Math.round(settings.canvasHeight / settings.pixelsPerMm)}–º–º 
            | –°–µ—Ç–∫–∞: {settings.gridSizeMm}–º–º 
            | –ú–∞—Å—à—Ç–∞–±: {settings.pixelsPerMm}px/–º–º
            {settings.snapToGrid && ' | –ü—Ä–∏–≤—è–∑–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'}
            {selectedItem && ` | –í—ã–±—Ä–∞–Ω: ${isRack ? selectedItem.name : selectedItem.product?.name || '–≠–ª–µ–º–µ–Ω—Ç'}`}
          </div>
          
          <Stage
            ref={stageRef}
            width={settings.canvasWidth}
            height={settings.canvasHeight}
            onMouseDown={(e) => {
              const clickedOnEmpty = e.target === e.target.getStage()
              if (clickedOnEmpty) {
                setSelectedId(null)
              }
            }}
          >
            <Layer>
              {/* Grid */}
              {settings.showGrid && (() => {
                const gridSizePixels = mmToPixels(settings.gridSizeMm)
                const verticalLines = Math.ceil(settings.canvasWidth / gridSizePixels)
                const horizontalLines = Math.ceil(settings.canvasHeight / gridSizePixels)
                
                return (
                  <>
                    {Array.from({ length: verticalLines }, (_, i) => (
                      <Group key={`grid-v-${i}`}>
                        <Rect
                          x={i * gridSizePixels}
                          y={0}
                          width={1}
                          height={settings.canvasHeight}
                          fill="#f3f4f6"
                        />
                      </Group>
                    ))}
                    {Array.from({ length: horizontalLines }, (_, i) => (
                      <Group key={`grid-h-${i}`}>
                        <Rect
                          x={0}
                          y={i * gridSizePixels}
                          width={settings.canvasWidth}
                          height={1}
                          fill="#f3f4f6"
                        />
                      </Group>
                    ))}
                  </>
                )
              })()}

              {/* 3D Racks */}
              {settings.show3D && racks.map((rack) => (
                <RackSystem3D
                  key={rack.id}
                  rack={rack}
                  settings={settings}
                  x={50}
                  y={50}
                  isSelected={selectedId === rack.id}
                  onClick={() => setSelectedId(rack.id)}
                />
              ))}

              {/* Items */}
              {items.map((item) => {
                if (item.type === 'shelf') {
                  return (
                    <EnhancedShelf
                      key={item.id}
                      shelf={item}
                      settings={settings}
                      isSelected={selectedId === item.id}
                      onClick={() => setSelectedId(item.id)}
                      onDragEnd={(e) => {
                        const newX = snapToGrid(e.target.x())
                        const newY = snapToGrid(e.target.y())
                        setItems(prev => prev.map(i => 
                          i.id === item.id 
                            ? { ...i, x: newX, y: newY }
                            : i
                        ))
                      }}
                    />
                  )
                } else {
                  return (
                    <PlanogramItem
                      key={item.id}
                      item={item}
                      isSelected={selectedId === item.id}
                      image={item.product?.imageUrl ? images[item.product.imageUrl] : undefined}
                      onClick={() => setSelectedId(item.id)}
                      onDragEnd={(e) => {
                        const newX = snapToGrid(e.target.x())
                        const newY = snapToGrid(e.target.y())
                        setItems(prev => prev.map(i => 
                          i.id === item.id 
                            ? { ...i, x: newX, y: newY }
                            : i
                        ))
                      }}
                    />
                  )
                }
              })}
            </Layer>
          </Stage>
        </div>
      </div>

      {/* Properties Modal */}
      {showPropertiesModal && selectedItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full m-4 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
              </h3>
              <button
                onClick={() => setShowPropertiesModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>
            
            <div className="space-y-4 text-sm">
              <div>
                <strong>
                  {isRack 
                    ? selectedItem.name 
                    : selectedItem.product?.name || '–ü–æ–ª–∫–∞'
                  }
                </strong>
              </div>
              
              {isRack ? (
                <>
                  <div className="text-gray-600">
                    –¢–∏–ø: {selectedItem.type === 'gondola' ? '–ì–æ–Ω–¥–æ–ª–∞' : selectedItem.type === 'wall' ? '–ü—Ä–∏—Å—Ç–µ–Ω–Ω—ã–π' : selectedItem.type === 'endcap' ? '–¢–æ—Ä—Ü–µ–≤–æ–π' : '–û—Å—Ç—Ä–æ–≤–Ω–æ–π'}
                  </div>
                  
                  <div className="border-t pt-3">
                    <h4 className="text-sm font-medium text-gray-800 mb-3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–µ–ª–ª–∞–∂–∞:</h4>
                    <div className="space-y-3">
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">
                          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π:
                        </label>
                        <input
                          type="number"
                          value={selectedItem.levels}
                          onChange={(e) => {
                            const newLevels = Math.max(1, Math.min(8, Number(e.target.value)))
                            setRacks(prev => prev.map(rack => 
                              rack.id === selectedId 
                                ? { ...rack, levels: newLevels }
                                : rack
                            ))
                          }}
                          className="input w-full text-sm h-8"
                          min="1"
                          max="8"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">
                          –®–∏—Ä–∏–Ω–∞ (–º–º):
                        </label>
                        <input
                          type="number"
                          value={selectedItem.width}
                          onChange={(e) => {
                            const newWidth = Number(e.target.value)
                            setRacks(prev => prev.map(rack => 
                              rack.id === selectedId 
                                ? { ...rack, width: newWidth }
                                : rack
                            ))
                          }}
                          className="input w-full text-sm h-8"
                          min="400"
                          max="3000"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">
                          –í—ã—Å–æ—Ç–∞ (–º–º):
                        </label>
                        <input
                          type="number"
                          value={selectedItem.height}
                          onChange={(e) => {
                            const newHeight = Number(e.target.value)
                            setRacks(prev => prev.map(rack => 
                              rack.id === selectedId 
                                ? { ...rack, height: newHeight }
                                : rack
                            ))
                          }}
                          className="input w-full text-sm h-8"
                          min="800"
                          max="3000"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-gray-600 mb-1">
                          –ì–ª—É–±–∏–Ω–∞ (–º–º):
                        </label>
                        <input
                          type="number"
                          value={selectedItem.depth}
                          onChange={(e) => {
                            const newDepth = Number(e.target.value)
                            setRacks(prev => prev.map(rack => 
                              rack.id === selectedId 
                                ? { ...rack, depth: newDepth }
                                : rack
                            ))
                          }}
                          className="input w-full text-sm h-8"
                          min="200"
                          max="800"
                        />
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <div className="text-gray-600">
                    –ü–æ–∑–∏—Ü–∏—è: ({Math.round(selectedItem.x / settings.pixelsPerMm)}, {Math.round(selectedItem.y / settings.pixelsPerMm)})–º–º
                  </div>
                  
                  {isShelf && (
                    <div className="border-t pt-3">
                      <h4 className="text-sm font-medium text-gray-800 mb-3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:</h4>
                      <div className="space-y-3">
                        <div>
                          <label className="block text-xs text-gray-600 mb-1">
                            –®–∏—Ä–∏–Ω–∞ (–º–º):
                          </label>
                          <input
                            type="number"
                            value={Math.round(selectedItem.width / settings.pixelsPerMm)}
                            onChange={(e) => {
                              const newWidthMm = Number(e.target.value)
                              const newWidthPx = newWidthMm * settings.pixelsPerMm
                              setItems(prev => prev.map(item => 
                                item.id === selectedId 
                                  ? { ...item, width: newWidthPx }
                                  : item
                              ))
                            }}
                            className="input w-full text-sm h-8"
                            min="50"
                            max="2000"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-600 mb-1">
                            –í—ã—Å–æ—Ç–∞ (–º–º):
                          </label>
                          <input
                            type="number"
                            value={Math.round(selectedItem.height / settings.pixelsPerMm)}
                            onChange={(e) => {
                              const newHeightMm = Number(e.target.value)
                              const newHeightPx = newHeightMm * settings.pixelsPerMm
                              setItems(prev => prev.map(item => 
                                item.id === selectedId 
                                  ? { ...item, height: newHeightPx }
                                  : item
                              ))
                              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–∫–∏
                              setTimeout(() => repositionProductsOnShelf(selectedId!), 0)
                            }}
                            className="input w-full text-sm h-8"
                            min="20"
                            max="500"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-600 mb-1">
                            –ì–ª—É–±–∏–Ω–∞ (–º–º):
                          </label>
                          <input
                            type="number"
                            value={selectedItem.depth || settings.defaultShelfDepth}
                            onChange={(e) => {
                              const newDepth = Number(e.target.value)
                              setItems(prev => prev.map(item => 
                                item.id === selectedId 
                                  ? { ...item, depth: newDepth }
                                  : item
                              ))
                            }}
                            className="input w-full text-sm h-8"
                            min="100"
                            max="800"
                          />
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {selectedItem.product && (
                    <div className="border-t pt-3">
                      <h4 className="text-sm font-medium text-gray-800 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</h4>
                      <div className="text-gray-600">
                        –†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {selectedItem.product.width}√ó{selectedItem.product.height}√ó{selectedItem.product.depth}–º–º
                      </div>
                      <div className="text-gray-600">
                        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selectedItem.product.category}
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
            
            <div className="flex justify-end mt-6">
              <button
                onClick={() => setShowPropertiesModal(false)}
                className="btn btn-secondary"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 